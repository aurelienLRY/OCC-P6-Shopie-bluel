/**
 * 
 * DÉPRÉCIER  - Appelle Api à chaque changement de filtre 
 * cette version demande d'avantage de ressources . 
 *  Elle est remplacée par js/worksFilter.js
 */





/**
 * Fonction asynchrone pour récupérer les travaux depuis l'API.
 * @returns {Promise} Une promesse contenant les données des travaux.
 */
async function getWorksFromServer() {
    try {
      // Effectuer une requête GET en utilisant la méthode fetch
      const response = await fetch("http://localhost:5678/api/works");
  
      // Vérifier si la réponse est OK (statut 200)
      if (!response.ok) {
        throw new Error("La requête a échoué avec le statut : " + response.status);
      }
  
      // Transformer la réponse en JSON
      const data = await response.json();
      return data;
    } catch (error) {
      // Gérer les erreurs
      console.error("Une erreur s'est produite : ", error);
    }
  }
  
  /**
   * Fonction pour générer les éléments du DOM pour les travaux en fonction de la catégorie sélectionnée.
   * @param {number | string} categoryId - ID de la catégorie sélectionnée, ou "allCategories" pour afficher tous les travaux.
   */
  async function addWorksToDom(categoryId) {
    const gallery = document.querySelector(".gallery");
    gallery.innerHTML = ""; // Effacer le contenu précédent de la galerie
    try {
      let data = await getWorksFromServer();
      data.forEach((work) => {
        if (categoryId === "allCategories" || work.categoryId === categoryId) {
          // Création des éléments du DOM
          let figure = document.createElement("figure");
          let img = document.createElement("img");
  
          img.src = work.imageUrl;
          img.alt = work.title;
          let figcaption = document.createElement("figcaption");
          figcaption.textContent = work.title;
          figure.appendChild(img);
          figure.appendChild(figcaption);
          gallery.appendChild(figure);
        }
      });
    } catch (error) {
      console.error("Une erreur s'est produite lors de l'affichage des travaux : ", error);
    }
  }
  
  /**
   * Fonction asynchrone pour récupérer les catégories depuis l'API.
   * @returns {Promise} Une promesse contenant les données des catégories.
   */
  async function getCategoriesFromServer() {
    try {
      // Effectuer une requête GET en utilisant la méthode fetch
      const response = await fetch("http://localhost:5678/api/categories");
  
      // Vérifier si la réponse est OK (statut 200)
      if (!response.ok) {
        throw new Error("La requête a échoué avec le statut : " + response.status);
      }
  
      // Transformer la réponse en JSON
      const data = await response.json();
      return data;
    } catch (error) {
      // Gérer les erreurs
      console.error("Une erreur s'est produite : ", error);
    }
  }
  
  /**
   * Fonction pour supprimer la classe "btn-filter-active" de tous les boutons de filtre.
   */
  function removeActiveFilterButtons() {
    const allBtn = document.querySelectorAll(".btn-filter");
    allBtn.forEach((btn) => {
      btn.classList.remove("btn-filter-active");
    });
  }
  
  /**
   * Fonction pour configurer les boutons de filtre.
   */
  async function setupFilterButtons() {
    const filter = document.getElementById("filter");
    
    
    
    let buttonAll = document.createElement("button");
    buttonAll.id = "allCategories";
    buttonAll.className = "btn-filter btn-filter-active";
    buttonAll.textContent = "Tous";
    filter.appendChild(buttonAll);
  
    buttonAll.addEventListener("click", (e) => {
      console.log("click du boutton:" + buttonAll.id);
      e.preventDefault();
      addWorksToDom("allCategories");
      removeActiveFilterButtons();
      buttonAll.classList.add("btn-filter-active");
    });
  


    const categories = await getCategoriesFromServer();
    categories.forEach(function (category) {
      let button = document.createElement("button");
      button.id = category.id;
      button.textContent = category.name;
      button.className = "btn-filter";

      
      button.addEventListener("click", (e) => {
        console.log("click du boutton:" + button.id);
        e.preventDefault();
        addWorksToDom(category.id);
        removeActiveFilterButtons();
        button.classList.add("btn-filter-active");
      });
  
      filter.appendChild(button);
    });
  }
  
  // Affiche tous les travaux au chargement initial
  addWorksToDom("allCategories");
  // Configure les boutons de filtre
  setupFilterButtons();
  